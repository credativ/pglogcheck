#!/usr/bin/perl

# Copyright (C) 2012 Christoph Berg <christoph.berg@credativ.de>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

use strict;
use warnings;
use File::Basename;
use Getopt::Long;
Getopt::Long::Configure ("bundling");
use Template;

my ($key1, $key2) = qw(total count);
my $examples1 = 10;
my $examples2 = 3;
my $keylen = 300;
my $substrlen = 1500;
my $errorlen = 500;

my %vars = (
	lines => 0,
	type => [],
	msgs => 0,
	total_raw => 0.0,
	connections => 0,
	checkpoints => 0,
);

my @typesort = qw(PANIC FATAL ERROR WARNING LOG);
my %typesort = map { $typesort[$_] => $_ } (0 .. $#typesort);

my %localtypemap = (
	WARNUNG => 'WARNING',
	FEHLER => 'ERROR',
	PANIK => 'PANIC',
);

GetOptions (
	# default sort order
	"avg|average|a" => sub { ($key1, $key2) = qw(avg count) },
	"count|c" => sub { ($key1, $key2) = qw(count total) },
	"total|t" => sub { ($key1, $key2) = qw(total count) },
	# number of example log lines
	"examples|e:10" => \$examples2,
);

my (%type, %statement);

sub fmt_t ($);
sub fmt_t ($)
{
	my $sec = shift;
	if ($sec == 0) {
		return '';
	} elsif ($sec < 0.1) {
		sprintf "%.3fms", $sec * 1000.0;
	} elsif ($sec < 1.0) {
		sprintf "%.0fms", $sec * 1000.0;
	} elsif ($sec < 60.0) {
		sprintf "%.3fs", $sec;
	} elsif ($sec < 86400.0) {
		sprintf "%d:%02d:%02.0f", int ($sec / 3600.0), int (($sec % 3600.0) / 60.0), $sec % 60.0;
	} else {
		sprintf ("%d d ", int ($sec / 86400.0)) . fmt_t ($sec % 86400.0);
	}
}

sub fmt_s ($)
{
	my $str = shift;
	$str =~ s/&/&amp;/g;
	$str =~ s/</&lt;/g;
	$str =~ s/>/&gt;/g;
	$str =~ s/\n/<br \/>\n/g;
	return substr ($str, 0, $substrlen);
}

sub fmt_error ($)
{
	my $str = shift;
	if (length ($str) > $errorlen) {
		return substr ($str, 0, $errorlen) . " ...";
	} else {
		return $str;
	}
}

sub dots ($)
{
	my $str = shift;
	return '...' if (length $str);
	return '';
}

sub eat_strings ($)
{
	my $str = shift;
	$str =~ s/[^,]+/?/g;
	return $str;
}

sub eat_values ($)
{
	my $msg = shift;
	$msg =~ s/(\bIN\s*\()(.*?)\)/$1...)/ig; # IN (foobar) -> IN (...)
	$msg =~ s/(\bVALUES\s*\()(.*)\)/$1 . eat_strings ($2) . ')'/ieg; # VALUES (foo, bar) -> VALUES (?, ?)
	$msg =~ s/'(.*?)'/"'" . dots ($1) . "'"/egs;
	$msg =~ s/(SELECT )(.{100}).+?( FROM )/$1$2 ... $3/i;
	return $msg;
}

sub eat_ticks ($)
{
	my $msg = shift;
	$msg =~ s/'(.*?)'/"'" . dots ($1) . "'"/egs;
	$msg =~ s/(SELECT )(.{100}).+?( FROM )/$1$2 ... $3/i;
	return $msg;
}

my ($lastkey, $lastmsg);
sub parse ($$$$$)
{
	my ($file, $line, $lineno, $localtype, $msg) = @_;
	#print STDERR "Parsing $line\n  $type\n  $msg\n";
	my $type = $localtypemap{$localtype} || $localtype; # english type name
	my $key = $msg;
	my $time;

	if ($type eq 'LOG') {
		# log_min_duration_statement
		if ($msg =~ /^(?:duration|Dauer): ([\d.]+) ms  (?:statement|Anweisung): (.*)/s) {
			($time, $key, $msg) = ($1 / 1000.0, eat_values ($2), eat_ticks ($2));

		# log_min_duration_statement, prepared statement
		} elsif ($msg =~ /^(?:duration|Dauer): ([\d.]+) ms  (Parsen|Binden|Ausf..?hren) (.*): (.*)/s) {
			my ($cmd, $name, $query);
			($time, $cmd, $name, $query) = ($1 / 1000.0, $2, $3, $4);
			$name =~ s/\d/N/g;
			$msg = "$cmd $name: $query";
			$key = eat_values ($msg);

		# log_statement = 'all'
		} elsif ($msg =~ /^(?:Anweisung): (.*)/s) {
			($key, $msg) = (eat_values ($1), eat_ticks ($1));

		# log_statement = 'all', prepared statement
		} elsif ($msg =~ /^(Parsen|Binden|Ausf..?hren) (.*): (.*)/s) {
			my ($cmd, $name, $query) = ($1, $2, $3);
			$name =~ s/\d/N/g;
			$msg = "$cmd $name: $query";
			$key = eat_values ($msg);

		# auto_explain output with query inline
		} elsif ($msg =~ /^duration: ([\d.]+) ms  plan:\nQuery Text: (.*)/) {
			($time, $key, $msg) = ($1 / 1000.0, eat_values ($2), eat_ticks ($2));

		# auto_explain output XXX
		} elsif ($msg =~ /^duration: ([\d.]+) ms  plan:\s+(.*)/s) {
			($time, $key, $msg) = ($1 / 1000.0, eat_values ($2), eat_ticks ($2));

		} elsif ($msg =~ /^(connection received|Verbindung empfangen):/) {
			$key = $1;
			$msg =~ s/ port=\S+//;

		} elsif ($msg =~ /^(connection authorized|Verbindung authorisiert):/) {
			$key = $1;
			$vars{connections}++;

		# disconnection: session time: 0:00:00.02 user=hobbit database=postgres host=[local]
		} elsif ($msg =~ /^(disconnection|Verbindungsende):/) {
			$key = $1;
			$msg =~ s/ (session time|Sitzungszeit): \S+/ $1: .../;
			$msg =~ s/ port=\S+//;

		} elsif ($msg =~ /^(checkpoint starting):/) {
			$key = $1;
			$vars{checkpoints}++;

		# checkpoint complete: wrote 0 buffers (0.0%); 0 transaction log file(s) added, 0 removed, 0 recycled; write=0.000 s, sync=0.000 s, total=0.008 s
		} elsif ($msg =~ /^checkpoint complete: .* total=([\d.]+) s/) {
			$time = $1;
			$key =~ s/[\d.]+/?/g; # eat all numbers
			$msg =~ s/[\d.]+(%| s)/?$1/g; # eat percentages and times
			$msg =~ s/[1-9][\d.]*/N/g; # eat non-zero numbers

		} elsif ($msg =~ /^(Checkpoints passieren zu oft)/) {
			$key = $1;

		} elsif ($msg =~ /^(autovacuum: processing database) "(.*)"/) {
			$key = $1;
			$vars{autovacuum}++; #XXX

		# automatisches Vacuum von Tabelle »postgres.public.log«: Index-Scans: 1
		#         Pages: 0 entfernt, 1236583 noch vorhanden
		#         Tuple: 750 entfernt, 28942414 noch vorhanden
		#         Systembenutzung: CPU 0.82s/0.92u sec elapsed 3257.34 sec
		} elsif ($msg =~ /^(automatisches Vacuum von Tabelle »\S+«)/) {
			$key = $1;
			if ($msg =~ /elapsed ([\d.]+) s/) {
				$time = $1;
			}

		# Prozess 11467 erlangte ExclusiveLock-Sperre auf Tupel (59, 48) von Relation 784775314 von Datenbank 784774385 nach 79946,917 ms
		} elsif ($msg =~ /^Prozess \d+ (erlangte|wartet)/) {
			if ($msg =~ /([\d.,]+) ms/) {
				$time = $1;
				$time =~ s/,/./;
				$time /= 1000.0;
				$msg =~ s/[\d.,]+ ms/... ms/;
			}
			$key = $msg;
			$key =~ s/(Prozess|Transaktion|Relation|Datenbank) \d+/$1 .../g;
			$key =~ s/(auf Tupel) \([\d, ]+\)/$1 (...)/g;

		# temporäre Datei: Pfad »base/pgsql_tmp/pgsql_tmp25529.0«, Größe 57974784
		} elsif ($msg =~ /^(temporäre Datei): Pfad »(\S+)«, Größe \d+/) {
			$key = $1;

		} elsif ($msg =~ /^(incomplete startup packet|unvollst..?ndiges Startpaket|could not receive data from client|konnte Daten vom Client nicht empfangen|unexpected EOF on client connection|unerwartetes EOF auf Client-Verbindung|SIGHUP empfangen, Konfigurationsdateien werden neu geladen)/) {

		} elsif ($msg =~ /^(pam_authenticate fehlgeschlagen|konnte Daten nicht an den Client senden)/) {

		} else {
			print STDERR "$file:$.: Could not parse: $localtype:  " . fmt_error ($msg) . "\n";
		}

	} elsif ($type =~ /PANIC|FATAL|ERROR|WARNING/) {
		if ($msg =~ /^(konnte Block \d+ von tempor..?rer Datei nicht schreiben|konnte Relation \S+ nicht erweitern)/) {
			$key =~ s/\d+/.../g;

		} else {
			#$vars{type}->{$type =~ /^F/ ? 'FATAL' : 'WARNING'}++; #XXX
			$key =~ s/bei Zeichen \d+/bei Zeichen .../;
			$msg = $key;
			$key =~ s/».*?«/»...«/g;
			$key =~ s/>>.*?<</>>...<</g;
		}

	} else {
		print STDERR "$file:$.: Unknown statement type $localtype: $localtype:  " . fmt_error ($msg) . "\n";
	}

	$key =~ s/\s+/ /g;
	$key = substr ($key, 0, $keylen);
	$statement{$key}->{type} = $type;
	$statement{$key}->{localtype} = $localtype;
	$statement{$key}->{count}++;
	$type{$type}->{count}++;
	if ($time) {
		$vars{total_raw} += $time;
		$statement{$key}->{total} += $time;
		$type{$type}->{total_raw} += $time;
	}
	$statement{$key}->{examples}->{$msg}->{count}++;
	push @{ $statement{$key}->{examples}->{$msg}->{msg} }, {
		msg => $line,
		msglineno => $lineno,
	};
	$lastkey = $key;
	$lastmsg = $msg;
}

sub parse0 ($$$)
{
	my ($file, $line, $lineno) = @_;
	if ($line =~ /(.*?) (LOG|ERROR|PANIC|PANIK|FATAL|FEHLER|WARNING|WARNUNG):  (.*)/s) {
		parse ($file, $line, $lineno, $2, $3);
	} elsif ($line =~ /(.*?) (ANWEISUNG|HINT|TIPP|DETAIL|ZUSAMMENHANG):  (.*)/s and $lastkey) { # query attached to an error message
		my $msglist = $statement{$lastkey}->{examples}->{$lastmsg}->{msg};
		@{$msglist}[@$msglist - 1]->{msg} .= "\n$line";
	} else {
		print STDERR "$file:$.: Could not parse: " . fmt_error ($line) . "\n";
	}
}

# input

sub parse_file ($)
{
	my ($file) = @_;
	my ($current, $lineno);
	while (<FILE>) {
		chomp;
		$vars{lines}++;
		if (/^\S/) { # new log entry
			if (defined $current) {
				parse0 ($file, $current, $lineno);
			}
			$current = $_;
			$lineno = $.;
		} elsif (/\s/ and $current) { # continued entry
			$current .= "\n$_";
		} else { # continued entry with missing start
			print STDERR "$file:$.: continued entry with missing start: " . fmt_error ($_) . "\n";
		}
	}
	if (defined $current) {
		parse0 ($file, $current, $lineno);
	}
}

foreach my $file (@ARGV) {
	if ($file =~ /\.gz$/) {
		open FILE, "zcat $file |";
	} elsif ($file =~ /\.bz2$/) {
		open FILE, "bzcat $file |";
	} else {
		open FILE, "<", $file or die "$file: $!";
	}
	parse_file ($file);
	close FILE;
}

# processing

$vars{total} = fmt_t ($vars{total_raw});

foreach my $t (sort { $typesort{$a} <=> $typesort{$b} } keys %type) {
	$type{$t}->{type} = $t;
	$type{$t}->{total} = fmt_t ($type{$t}->{total_raw}) if ($type{$t}->{total_raw});
	push @{$vars{type}}, $type{$t};
	$vars{msgs} += $type{$t}->{count};
}


foreach my $s (keys %statement) {
	$statement{$s}->{total} ||= 0;
	$statement{$s}->{avg} = $statement{$s}->{total} / $statement{$s}->{count};
}

#use Data::Dumper;
#print Dumper (\%vars);
#exit;

# output

my $template = Template->new ({
	INCLUDE_PATH => [ dirname ($0), '/usr/share/pglogcheck' ],
});

my $id = 1;
foreach my $s (sort { $statement{$b}->{$key1} <=> $statement{$a}->{$key1} ||
		      $statement{$b}->{$key2} <=> $statement{$a}->{$key2} } keys %statement) {
	my $s_h = $statement{$s};

	my $row = {
		count => $s_h->{count},
		total => fmt_t ($s_h->{total}),
		total_raw => $s_h->{total},
		avg => fmt_t ($s_h->{avg}),
		avg_raw => $s_h->{avg},
		type => $s_h->{type},
		localtype => $s_h->{localtype},
		query => fmt_s ($s),
		example_row_count => 0,
		id => $id++,
	};

	my $s_ex = $s_h->{examples};
	my $j;
	foreach my $ex (sort { $s_ex->{$b}->{count} <=> $s_ex->{$a}->{count} } keys %$s_ex) {
		my $ex_h = $s_ex->{$ex};
		my $ex_row = {
			count => $ex_h->{count},
			example => fmt_s ($ex),
			msg_row_count => 0,
			id => $id++,
		};

		if ($examples2) {
			my $k;
			foreach my $msg (@{ $ex_h->{msg} }) {
				push @{$ex_row->{example_msgs}}, {
					msg => fmt_s ($msg->{msg}),
					lineno => $msg->{msglineno},
					id => $id++,
				};
				$ex_row->{msg_row_count}++;
				last if (++$k >= $examples2);
			}
		}
		push @{$row->{example_rows}}, $ex_row;
		$row->{example_row_count}++;
		last if (++$j >= $examples1);
	}
	push @{$vars{rows}}, $row;
}

$template->process('pglogcheck.template', \%vars) || die $template->error();
