#!/usr/bin/perl

use strict;
use warnings;
use File::Basename;
use Getopt::Long;
Getopt::Long::Configure ("bundling");
use Template;

my ($key1, $key2) = qw(total n);
my $examples1 = 10;
my $examples2 = 0;
my $keylen = 300;
my $substrlen = 1500;

my %vars = (
	lines => 0,
	type => {
		LOG => 0,
		WARNING => 0,
		FATAL => 0,
	},
	total_raw => 0.0,
	connections => 0,
	checkpoints => 0,
);

GetOptions (
	# default sort order
	"avg|average|a" => sub { ($key1, $key2) = qw(avg n) },
	"count|c" => sub { ($key1, $key2) = qw(n total) },
	"total|t" => sub { ($key1, $key2) = qw(total n) },
	# number of example log lines
	"examples|e:10" => \$examples2,
);

my %statement;

sub fmt_t ($);
sub fmt_t ($)
{
	my $ms = shift;
	if ($ms < 1.0) {
		sprintf "%.3f ms", $ms * 1000.0;
	} elsif ($ms < 60.0) {
		sprintf "%.3f s", $ms;
	} elsif ($ms < 86400.0) {
		sprintf "%d:%02d:%02.0f", int ($ms / 3600.0), int (($ms % 3600.0) / 60.0), $ms % 60.0;
	} else {
		sprintf ("%d d ", int ($ms / 86400.0)) . fmt_t ($ms % 86400.0);
	}
}

sub fmt_s ($)
{
	my $str = shift;
	$str =~ s/&/&amp;/g;
	$str =~ s/</&lt;/g;
	$str =~ s/>/&gt;/g;
	$str =~ s/\n/<br \/>\n/g;
	return substr ($str, 0, $substrlen);
}

sub dots ($)
{
	my $str = shift;
	my $l = length $str;
	$l = 3 if ($l > 0);
	return '.' x $l;
}

sub eat_strings ($)
{
	my $str = shift;
	$str =~ s/[^,]+/?/g;
	return $str;
}

sub eat_values ($)
{
	my $msg = shift;
	$msg =~ s/(\bIN\s*\()(.*?)\)/$1...)/ig;
	$msg =~ s/(\bVALUES\s*\()(.*)\)/$1 . eat_strings ($2) . ')'/ieg;
	$msg =~ s/'(.*?)'/"'" . dots ($1) . "'"/egs;
	return $msg;
}

sub eat_ticks ($)
{
	my $msg = shift;
	$msg =~ s/'(.*?)'/"'" . dots ($1) . "'"/egs;
	return $msg;
}

my ($lastkey, $lastmsg);
sub parse ($$$)
{
	my ($line, $type, $msg) = @_;
	#print STDERR "Parsing $line\n  $type\n  $msg\n";
	my $key = $msg;
	my $time;

	if ($type eq 'LOG') {
		$vars{type}->{LOG}++;
		if ($msg =~ /^Dauer: ([\d.]+) ms  Anweisung: (.*)/s) {
			($time, $key, $msg) = ($1 / 1000.0, eat_values ($2), eat_ticks ($2));

		} elsif ($msg =~ /^Dauer: ([\d.]+) ms  (Ausführen|Parsen) (.*): (.*)/s) {
			my ($cmd, $name, $query);
			($time, $cmd, $name, $query) = ($1 / 1000.0, $2, $3, $4);
			$name =~ s/\d/N/g;
			$msg = "$cmd $name: $query";
			$key = eat_ticks ($msg);

		} elsif ($msg =~ /^(Verbindung empfangen):/) {
			$key = $1;
			$msg =~ s/ port=\S+//;

		} elsif ($msg =~ /^(Verbindung authorisiert):/) {
			$key = $1;
			$vars{connections}++;

		} elsif ($msg =~ /^(Verbindungsende):/) {
			$key = $1;
			$msg =~ s/ Sitzungszeit: \S+//;
			$msg =~ s/ port=\S+//;

		} elsif ($msg =~ /^(unvollst..?ndiges Startpaket|konnte Daten vom Client nicht empfangen|unerwartetes EOF auf Client-Verbindung)/) {

		} elsif ($msg =~ /^(checkpoint starting):/) {
			$key = $1;
			$vars{checkpoints}++;

		# checkpoint complete: wrote 0 buffers (0.0%); 0 transaction log file(s) added, 0 removed, 0 recycled; write=0.000 s, sync=0.000 s, total=0.008 s
		} elsif ($msg =~ /^checkpoint complete: .* total=([\d.]+) s/) {
			$time = $1;
			$key =~ s/[\d.]+/?/g; # eat all numbers
			$msg =~ s/[\d.]+(%| s)/?$1/g; # eat percentages and times
			$msg =~ s/[1-9][\d.]*/N/g; # eat non-zero numbers

		} elsif ($msg =~ /^Prozess \d+ (erlangte|wartet)/) {
			if ($msg =~ /([\d.,]+) ms/) {
				$time = $1;
				$time =~ s/,/./;
				$time /= 1000.0;
				$msg =~ s/[\d.,]+ ms/... ms/;
			}
			$key = $msg;
			$key =~ s/(Prozess|Transaktion) \d+/$1 .../g;

		} elsif ($msg =~ /^(pam_authenticate fehlgeschlagen|konnte Daten nicht an den Client senden)/) {

		} else {
			print STDERR "Could not parse line $.: $type:  $msg\n";
		}

	} elsif ($type =~ /FATAL|FEHLER|WARNING|WARNUNG/) {
		$vars{type}->{$type =~ /^F/ ? 'FATAL' : 'WARNING'}++;
		$key =~ s/bei Zeichen \d+/bei Zeichen .../;
		$msg = $key;
		$key =~ s/».*?«/»...«/g;
		$key =~ s/>>.*?<</>>...<</g;
	}

	$key =~ s/\s+/ /g;
	$key = substr ($key, 0, $keylen);
	$statement{$key}->{type} = $type;
	$statement{$key}->{count}++;
	if ($time) {
		$vars{total_raw} += $time;
		$statement{$key}->{total} += $time;
	}
	$statement{$key}->{examples}->{$msg}->{count}++;
	push @{ $statement{$key}->{examples}->{$msg}->{msg} }, $line;
	$lastkey = $key;
	$lastmsg = $msg;
}

sub parse0 ($)
{
	my $line = shift;
	if ($line =~ /(.*?) (LOG|FATAL|FEHLER|WARNING|WARNUNG):  (.*)/s) {
		parse ($line, $2, $3);
	} elsif ($line =~ /(.*?) (ANWEISUNG|TIPP):  (.*)/s and $lastkey) { # query attached to an error message
		my $msglist = $statement{$lastkey}->{examples}->{$lastmsg}->{msg};
		@{$msglist}[@$msglist - 1] .= "\n$line";
	} else {
		print STDERR "Could not parse line $.: " . substr ($line, 0, $substrlen) . "\n";
	}
}

# input

my $current;
while (<>) {
	chomp;
	$vars{lines}++;
	if (/^\S/) { # new log entry
		if (defined $current) {
			parse0 ($current);
		}
		$current = $_;
	} elsif (/\s/ and $current) { # continued entry
		$current .= "\n$_";
	} else { # continued entry with missing start
		print STDERR "Line $.: continued entry with missing start: $_\n";
	}
}
if (defined $current) {
	parse0 ($current);
}

# processing

$vars{total} = fmt_t ($vars{total_raw});

foreach my $s (keys %statement) {
	$statement{$s}->{total} ||= 0;
	$statement{$s}->{avg} = $statement{$s}->{total} / $statement{$s}->{count};
}


# output

my $template = Template->new (
	INCLUDEPATH => [ dirname ($0), '/usr/share/pglogcheck' ],
);

my $id = 1;
foreach my $s (sort { $statement{$b}->{$key1} <=> $statement{$a}->{$key1} ||
		      $statement{$b}->{$key2} <=> $statement{$a}->{$key2} } keys %statement) {
	my $s_h = $statement{$s};

	my $row = {
		count => $s_h->{count},
		total => fmt_t ($s_h->{total}),
		total_raw => $s_h->{total},
		avg => fmt_t ($s_h->{avg}),
		avg_raw => $s_h->{avg},
		type => $s_h->{type},
		query => fmt_s ($s),
		example_row_count => 0,
		id => $id++,
	};

	my $s_ex = $s_h->{examples};
	my $j;
	foreach my $ex (sort { $s_ex->{$b}->{count} <=> $s_ex->{$a}->{count} } keys %$s_ex) {
		my $ex_h = $s_ex->{$ex};
		my $ex_row = {
			count => $ex_h->{count},
			example => fmt_s ($ex),
			msg_row_count => 0,
			id => $id++,
		};

		if ($examples2) {
			my $k;
			foreach my $msg (@{ $ex_h->{msg} }) {
				push @{$ex_row->{example_msgs}}, {
					msg => fmt_s ($msg),
					id => $id++,
				};
				$ex_row->{msg_row_count}++;
				last if (++$k >= $examples2);
			}
		}
		push @{$row->{example_rows}}, $ex_row;
		$row->{example_row_count}++;
		last if (++$j >= $examples1);
	}
	push @{$vars{rows}}, $row;
}

$template->process('pglogcheck.template', \%vars) || die $template->error();
